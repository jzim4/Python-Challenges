# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
import math
triangles = []
sum = 0
toAdd = 0

while True:
    toAdd += 1
    sum += toAdd
    # print('sum:')
    # print(sum)
    triangles.append(sum)

    factors = []

    for x in range(1,math.ceil(math.sqrt(triangles[-1]))):

        if triangles[-1] % x == 0:
            factors.append(x)
            factors.append(triangles[-1]/x)
    # print('len(factors):')
    # print(len(factors))

    if len(factors) > 500:
        print('the triangle number is: ')
        print(sum)
        print('and the number of factors is: ')
        print(len(factors))
        break

    # if toAdd == 20:
    #     break






        # factors.append(triangles[i])
        # try:
        #     for n in range(1,int(triangles[i]/2) + 1):
        #         if triangles[i] % n == 0:
        #             factors.append(n)
        #
        # except TypeError:
        #     for n in range(1,int((triangles[i]+0.5)/2 + 1), 2):
        #         if triangles[i] % n == 0:
        #             factors.append(n)

        #print(len(factors))



    # print('triangles:')
    # print(triangles)

    # print('factors:')
    # print(factors)
    # print('\n\n')




#don't test odd numbers for odd numbers
#don't repeat factors for multiples of the factor
